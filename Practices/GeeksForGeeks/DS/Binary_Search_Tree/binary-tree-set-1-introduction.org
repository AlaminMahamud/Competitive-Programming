#+TITLE: Binary Tree
* Binary Tree Set 1 Introduction
*Trees*: Unlike Arrays, Linked Lists, Stack and queues, which are linear data structures,
trees are hierarchical data structures.

*Tree vocabulary*: The topmost node is called root of the tree. The elements that are directly under an element are called its children. The element directly  above somethings is called its parent. For example, a is a child of f.

** Why Trees?
** Main applications of trees include
** Binary Tree
A tree whose elements have at most 2 children is called binary tree. Since each element in a binary tree can have only 2 children, we typically name them the left and right child.
** Binary Tree representation in C

#+BEGIN_SRC c++
#include <cstdio>
using namespace std;

int main(){
cout << "Hello World" << endl;
}
#+END_SRC

#+BEGIN_SRC C
printf("Hello World");
#+END_SRC

#+RESULTS:
: Hello World

#+BEGIN_SRC cpp
#include <iostream>
using namespace std;

int main(){
cout << "Hello World" << endl;
return 0;
}
#+END_SRC

#+RESULTS:
: Hello World

#+BEGIN_SRC cpp
  #include <bits/stdc++.h>
using namespace std;
  struct node{
  int data;
  struct node *left;
  struct node *right;
  };

  /* newNode() allocates a new node with the given data and NULL left and right pointers */
  struct node* newNode(int data){
    // Allocate memory for new node
    struct node* node = (struct node*) malloc(sizeof(struct node));

    // Assign data to this node
    node->data = data;

    // Initialize left and right children as NULL
    node->left = NULL;
    node->right = NULL;

    return node;
  }

void traverseNodes(struct node* root){
if(root!=NULL)
cout << root->data << endl;
if(root->left != NULL)
traverseNodes(root->left);
if(root->right != NULL)
traverseNodes(root->right);
}

int main(){
// create root
struct node * root = newNode(1);
// following is the tree after above statement
root->left = newNode(2);
root->right = newNode(3);

root->left->left = newNode(4);

traverseNodes(root);
return 0;
}

#+END_SRC

#+RESULTS:
| 1 |
| 2 |
| 4 |
| 3 |

* Binary Tree | Set 2 (Properties)
1. The maximum number of nodes at level 'l' of a binary tree is 2^(l-1)
2. Maximum number of nodes in a binary tree of height 'h' is 2^h -1
3. In a Binary tree with N Nodes, minimum possible height or minimum number of level is
ceil(log2(N+1))

* Binary Tree Kinds
* Handshaking Lemma and Interesting Tree Properties
* Enumeration of Binary Trees
* Applications of tree data structure
* Tree Traversals
Unlike linear data structures (Array, Linked List, Queues, Stacks, etc) which have only one logical way to traverse them, trees can
be traversed in different ways. Following are the generally used ways for traversing trees.

Depth first Traversals
a) Inorder
b) Preorder
c) Postorder


** Inorder 

#+BEGIN_QUOTE
Algorithm Inorder (tree)
1. traverse the left subtree, i.e., call Inorder (left-subtree)
2. Visit the root.
3. Traverse the right subtree, i.e., call Inorder (right-subtree)
#+END_QUOTE

*** Uses of Inorder
In case of binary search tree (BST), Inorder traversal gives nodes in non-decreasing order.
To get nodes of BST in non-decreasing order, a variation of Inorder traversal where Inorder itraversal s reversed, can be used. 
Example: Inorder traversal for the above given figure 4 2 5 1 3
** Preorder
#+BEGIN_QUOTE
Algorithm Preorder(tree):
1. Visit the root.
2. Traverse the left subtree, i.e., call Preorder(left-subtree)
3. Traverse the right subtree, i.e., call Preorder(right-subtree)
#+END_QUOTE

*** Uses of Preorder
preorder traversal is used to create a copy of the tree. Preorder traversal is also used to get
prefix expression on of an expression tree. 
Expected result : 1 2 4 5 3

** Postorder
#+BEGIN_QUOTE
Algorithm Postorder(tree)
1. Traverse the left subtree, i.e., call Postorder(left-subtree)
2. Traverse the right subtree, i.e., call Postorder(right-subtree)
3. Visit the root.
#+END_QUOTE

*** Uses of Postorder
postorder traversal is used to delete the tree. Postorder traversal is useful to get the postfix expression tree. 
Expected output : 45 23 1


#+BEGIN_SRC cpp
  #include <bits/stdc++.h>
using namespace std;
  struct node{
  int data;
  struct node *left;
  struct node *right;
  };

  /* newNode() allocates a new node with the given data and NULL left and right pointers */
  struct node* newNode(int data){
    // Allocate memory for new node
    struct node* node = (struct node*) malloc(sizeof(struct node));

    // Assign data to this node
    node->data = data;

    // Initialize left and right children as NULL
    node->left = NULL;
    node->right = NULL;

    return node;
  }


// Inorder
void traverseNodes(struct node* root){

if(root->left != NULL)
traverseNodes(root->left);
if(root!=NULL)
cout << root->data << endl;
if(root->right != NULL)
traverseNodes(root->right);
}

// Preorder
void preOrder(struct node* root){
if(root!=NULL)
cout <<root->data<<endl;
if(root->left!=NULL)
preOrder(root->left);
if(root->right != NULL)
preOrder(root->right);
}

// PostOrder
void postOrder(struct node * root){
if(root->left!=NULL)
postOrder(root->left);
if(root->right!=NULL)
postOrder(root->right);
if(root!=NULL)
cout << root->data << endl;
}

int main(){
// create root
struct node * root = newNode(1);
// following is the tree after above statement
root->left = newNode(2);
root->right = newNode(3);

root->left->left = newNode(4);
root->left->right = newNode(5);
cout << "Inorder" << endl;
traverseNodes(root);
cout << "PreOrder" << endl;
preOrder(root);
cout << "PostOrder(root)" <<endl;
postOrder(root);
return 0;
}

#+END_SRC

#+RESULTS:
|         Inorder |
|               4 |
|               2 |
|               5 |
|               1 |
|               3 |
|        PreOrder |
|               1 |
|               2 |
|               4 |
|               5 |
|               3 |
| PostOrder(root) |
|               4 |
|               5 |
|               2 |
|               3 |
|               1 |

* BFS vs DFS for Binary Tree
* Level Order Tree Traversal
#+BEGIN_SRC cpp
    // Recursive C program for level order traversal of Binary tree
    #include  <bits/stdc++.h>
    using namespace std;


    // A binary tree node has data, pointer to left child
    // and pointer to right child 
    struct node{
    int data;
    struct node * left;
    struct node * right;
    };

   struct node * newNode(int data){
      struct node * temp = (struct node * ) malloc(sizeof(struct node));
      temp->data = data;
      temp->left = NULL;
      temp->right = NULL;
      return temp;
    }

    int height(struct node * root){
      if(root==NULL) return 0;
      int left = height(root->left);
      int right = height(root->right);
      if(left > right) return left+1;
      else return right+1;
    }

    void printGivenLevel(struct node * root, int level){
      if (root == NULL)
        return;
      if(level==1){
        cout << root->data << endl;
      }
      else{
        printGivenLevel(root->left, level-1);
        printGivenLevel(root->right, level-1);
      }
    }


    void printLevelOrder(struct node * root){
      int h = height(root)+1;
      for(int i = 1; i < h; i++)
        printGivenLevel(root, i);
    }

    int main(){
      struct node * root = newNode(1);
      root->left = newNode(2);
      root->right = newNode(3);
      root->left->left = newNode(4);
      root->left->right = newNode(5);
  cout << "OK" << endl;
      printLevelOrder(root);
    }

   
#+END_SRC

#+RESULTS:
| OK |
|  1 |
|  2 |
|  3 |
|  4 |
|  5 |

#+BEGIN_SRC cpp
  #include <stdio.h>
  #include <stdlib.h>

  struct node{
    int data;
    struct node * left;
    struct node * right;
  };

  struct node * newNode(int data){
    struct node * temp = (struct node*) malloc(sizeof(struct node));
    temp->data = data;
    temp->left = temp->right = NULL;
    return temp;
  }

  int height(struct node * temp){
    if (temp == NULL) return 0;
    int le = height(temp->left);
    int ri = height(temp->right);
    if(le > ri) return le+1;
    else return ri+1;
  }

  void levelByLevelTraversal(struct node * node, int level){
    if(node == NULL) return;
    if(level == 1)
      printf("%d\n", node->data);
    else{
      levelByLevelTraversal(node->left, level-1);
      levelByLevelTraversal(node->right, level-1);
    }
  }

  void levelOrderTraversal(struct node * root){
    int h = height(root) + 1;
   
    int i;
    for(i = 1; i < h; i++)
      levelByLevelTraversal(root, i);
  }

  int main(){
    struct node * root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
   
    levelOrderTraversal(root);
  }
#+END_SRC

#+RESULTS:
| 1 |
| 2 |
| 3 |
| 4 |
| 5 |

#+BEGIN_SRC cpp
// level order traversal using Queue.


#+END_SRC
