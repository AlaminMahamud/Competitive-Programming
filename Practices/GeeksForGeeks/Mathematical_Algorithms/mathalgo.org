#+TITLE: Mathematical Algorithms
* Efficient way to multiply with 7
#+BEGIN_SRC c++
  int multiplyBySeven(unsigned int n){
    return (n>>3) - n;
  }
#+END_SRC
* Effiecient way to check if a number is a multiple of 3
#+BEGIN_SRC c++
  #include <stdio.h>

  /* Function to check if n is a multiple of 3 */
  int isMultipleOf3(int n){
    int odd_count = 0;
    int even_count = 0;

    if(n<0) n = -n;
    if(n == 0) return 1;
    if(n == 1) return 0;

    while(n){
      if(n&1)
        odd_count++;
      n = n>>1;
      if(n&1)
        even_count++;
      n = n >> 1;
    }
    return isMultipleOf3(abs(odd_count - even_count));
  }
#+END_SRC
* Write a program to print all permutations of a given string
#+BEGIN_SRC c
  // C Program to print all permutations with duplicates allowed
  #include <stdio.h>
  #include <string.h>

  // Function to swap values at two pointers
  void swap(char *x, char *y){
    char temp;
    temp = *x;
    ,*x = *y;
    ,*y = temp;
  }

  // Function to print permutations of string
  // This function takes three parameters
  // 1. string
  // 2. Starting index of the string
  // 3. Ending index of the string

  void permute(char *a, int l, int r){
    int i, rr = r+1;
    if (l == r) printf("%s\n", a);
    else {

      for (int i = l; i < rr; i++ ){
        swap((a+l), (a+i));
        permute(a, l+1, r); // recursive call with the remaining characters
        swap((a+l), (a+i)); // backtrack
      }
    }
  }


  // Driver program to test above functions
  int main(){
    char str[] = "ABC";
    int n = strlen(str);
    permute(str, 0, n-1);
    return 0;
  }
#+END_SRC
* a number is lucky or not
#+BEGIN_SRC c
  #include <bits/stdc++.h>
  using namespace std;

  int main(){
    bool mark[100], flag = true;
    int i = 2, p;
    memset(mark, true, sizeof(mark));
    while(true){
      p = 0;
      flag = true;
      for(int j = 1; flag && j < 100; j++){
        if(mark[j])
         p++;
        if(p==i){
          mark[j] = false;
          p = 0;
        }
      }
      i++;
      if(i==10) break;
    }
    for(i = 1; i < 100; i++)
      if(mark[i])
        printf("%d\n", i);
    return 0;
  }

#+END_SRC
