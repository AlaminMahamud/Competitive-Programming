#+TITLE: searching_and_sorting
* Searching
** Linear Search
#+BEGIN_SRC c++
  // Linearly search for x in arr[].
  // If x is present then return its
  // Location, otherwise return -1

  int search(int arr[], int n, int x){
    int i;
    for(i = 0; i < n; i++)
      if(arr[i] == x)
        return i;
    return -1;
  }
#+END_SRC
** Binary Search
#+BEGIN_SRC c++
  // Recursive Implementation 
  int binary_search(int arr[], int l, int r, int x){
    if(r>=l){
      int mid = l + (r-l)/2;
      // If the element is present at the middle itself
      if(arr[mid] == x) return mid;

      // If element is smaller than middle then it can only be present in left subarray.
      if(arr[mid] > x) return binary_search(arr, l, mid-1, x);

      // Else the element can only be present in right subarray
      return binary_search(arr, mid+1, r, x);
    }
    return -1;
  }

#+END_SRC
** jump search
#+BEGIN_SRC java
  public class JumpSearch {
      public static jumpsearch(int[] arr, int x){
          // calculate the array size
          int n = arr.length;

          // calculate the steps to jump
          int step = (int)Math.floor(Math.sqrt(n));
          int newstep = step;

          // Finding the block where the element is
          // present (if it is present)
          int prev = 0;

          while(arr[Math.min(step, n) - 1] < x){
              prev = step;
              step += newstep;
              if(prev >= n)
                  return -1;
          }

          // Doing a linear search for x in block
          // beginning with prev
          while(arr[prev] < x){
              prev++;
              // If we reached next block or end of
              // array, element is nnot present
              if(prev == Math.min(step, n))
                  return -1;
          }
          // If element is found
          if(arr[prev] == x)
              return prev;
          return -1;
      }


      public static void main(){
          int arr[] = {10, 20, 30, 40};
          int x = 55;

          // Find the index of x using JumpSearch
          int index = jumpsearch(arr, x);

          //print the index where 'x' is located
          System.out.println("\nNumber " + x + " is at index " + index);
      }
  }

#+END_SRC
** interpolation Search
#+BEGIN_SRC c++
  // C++ Program to implement Interpolation Search
  #include <iostream>
  using namespace std;

  // If x is present in arr[0..n-1], then returns
  // index of it, else returns -1

  int interpolation_search(int arr[], int x, int n){
    // Find indexes of two corners
    int lo = 0;
    int hi = n-1;

    // Since array is sorted, an element present
    // in array must be in range defined by corner

    while(lo <= hi && arr[lo]<=x && arr[hi]>=x){
      int pos = lo + ((double)((x-arr[lo]) * (hi-lo)) / (double)(arr[hi] - arr[lo]));

      // Conditions of target found
      if (arr[pos] == x)
        return pos;

      // If x is larger, x is an upper part
      if(arr[pos] < x)
        lo = pos+1;
      //
    }

  }

  int main(){

    return 0;
  }

#+END_SRC
** exponential search
:PROPERTIES:
:ORDERED:  t
:END:
#+BEGIN_SRC c++
  #include <bits/stdc++.h>
  using namespace std;

  void exponential_search(int arr[], int n, int x){
    int ex = 1;

    while(true){
      if(a[ex-1] == x){ cout << "Element found at index " << ex-1 << endl;
        return;}

      if(a[ex-1] < x){
        break;
      }
      ex*=2;
    }

    for(int i = ex-2; i > -1; i--)
      if(a[i] == x)
        {
          cout << "Element found at index " << i << endl;
          return;
        }
  }


  int main(){
    int arr[] = {10, 20, 30, 40, 50, 60};
    int x = 60;
    int n = 6;
    exponential_search(arr, n, x);
    return 0;
  }
#+END_SRC

#+BEGIN_SRC c++
  // Below is a C++ implementation of above steps
  // C++ Program to find an element x in a.
  // sorted array using Exponential Search.

  #include <bits/stdc++.h>
  using namespace std;

  int binarySearch(int arr[], int, int, int);

  // Returns positions of first occurance of
  // x in array
  int exponentialSearch(int arr[], int n, int x){
    // If x is present at first location itself
    if(arr[0] == x)
      return 0;

    // Find range for binary search by
    // repeated doubling
    int i = 1;
    while(i<n && arr[i] <= x){
      i = i*2;

      // Call binary search for the found range
      return binarySearch(arr, i/2, min(i, n), x);
    }

  }


  // write a binary search recursive function
  // i know i can do it.

  int main(int argc, char *argv[])
  {
    // write the driver function.
    return 0;
  }


#+END_SRC

** Ternary Search
#+BEGIN_SRC c++
  // A recursive ternary search funciton. It returns location of x in
  // given array arr[l..r] is present, otherwise -1

  int ternarySearch(int arr[], int l, int r, int x){
    if(r>=l){
      int mid1 = l + (r-l)/3;
      int mid2 = mid1 + (r-l)/3;

      // If x is present at the mid1
      if(arr[mid1] == x) return mid1;

      // if x is present at the mid2
      if(arr[mid2] == x) return mid2;

      // if x is present in left one-third
      if(arr[mid1] > x) return ternarySearch(arr, l, mid1-1, x);

      // if x is present in right one-third
      if(arr[mid2] < x) return ternarySearch(arr, mid2+1, r, x);

      // if x is present in middle one-third
      return ternarySearch(arr, mid1+1, mid2-1, x);
    }
    return -1;
  }
#+END_SRC

* Sorting
** Selection Sort
#+BEGIN_SRC c++
  #include <iostream>
  using namespace std;

  #define LARGE 10000000

  int * selection_sort(int arr[], int n){
    int arr2[n];
  
    for(int i = n-1; i > -1; i--){
      int max = -1;
      int max_i = 0;
      for(int j = 0; j < n; j++){
        if (max < a[j]){
          max = a[j];
          max_i = j;
        }
      }
      arr2[i] = max;
      arr[max_i] = LARGE;
    }

    return arr2;
  }

  void print_array(int * arr, int n){
    for (int i = 0; i < n; i++)
      cout << arr[i] << endl;
  }
  int main(int argc, char *argv[])
  {
    int arr[] = {55, 10, 20, 30, 40, 50, 60};
    int *p;
    p = selection_sort(arr, 7);
    print_array(p, 7);
    return 0;
  }

#+END_SRC
** Bubble Sort
#+BEGIN_SRC c++
  #include <bits/stdc++.h>
  using namespace std;

  void swap(int *a, int *b){
    int temp = *a;
    *a = *b;
    *b = temp;
  }

  void bubble_sort (int arr[], int n){
    for(int i = 0; i < n; i++){
      for(int j = i+1; j < n && i!=j; j++){
        if(arr[i]>arr[j])
          swap(&arr[i], &arr[j]);
      }
    }
  }

  void print_array(int arr[] , int n){
    for(int i = 0; i < n; i++)
      cout << arr[i] << endl;
  }


  int main(){
    int arr[] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
    bubble_sort(arr,10);
    print_array(arr,10);
    return 0;
  }

#+END_SRC
** Insertion Sort
#+BEGIN_SRC c++ 
  #include <bits/stdc++.h>
  using namespace std;

  void swap(int *a, int *b){
    int temp = *a;
    ,*a = *b;
    ,*b = temp;
  }

  void insertion_sort(int arr[], int n){
    for(int i = 1; i < n; i++){
      for(int j = 0; j < i; j++){
        if(arr[i] < arr[j])
          swap(&arr[i], &arr[j]);
      }
    }
  }

  void print_arrr(int arr[], int n){
    for(int i = 0; i < n; i++)
      cout << arr[i] << endl;
  }

  int main(){
    int arr[] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
    insertion_sort(arr, 10);
    print_arrr(arr, 10);
    return 0;
  }

#+END_SRC
** Merge Sort
** Heap Sort
Not understanding heap sort.
first i need to understand Heap <- Complete Binary Tree <- Binary Tree <- Tree

