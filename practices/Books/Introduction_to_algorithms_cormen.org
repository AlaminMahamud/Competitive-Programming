#+TITLE: Introduction to algorithms - Cormen
* Foundations => May - 26 - 2017
** Introduciton
*** Algorithm
*** Algorithms as a technology
** Getting Started
*** Insertion Sort
*** Analyzing Algorithms
*** Designing Algorithms
** Growth Of funcitons
*** Asymptotic Notation
*** Standard Notations and common funcitons
** DONE Divide and conquer
   CLOSED: [2017-05-27 Sat 18:15]
   :LOGBOOK:
   - State "DONE"       from ""           [2017-05-27 Sat 18:15]
   :END:
*** The maximum subarray problem
#+BEGIN_SRC c++
  #include <bits/stdc++.h>
  using namespace std;
  int LEFT_INDEX = 0;
  int RIGHT_INDEX = 0;
  int MAX_SUM = 0;

  void FIND_MAXIMUM_CROSS_SUBARRAY(int A[], int low, int mid, int high){
    int l_sum = -100000;
    int sum = 0;
    int max_l = 0;
    for(int i = mid; i > low-1; i--)
    {
      sum += A[i];
      if(sum > l_sum){
        l_sum = sum;
        max_l = i;
      }
    }

    int r_sum = -1000000;
    sum = 0;
    int max_r = 0;
    for(int i = mid+1; i < high+1; i++)
    {
      sum += A[i];
      if(sum > r_sum)
        {
          r_sum = sum;
          max_r = i;
        }
    }
    LEFT_INDEX = max_l;
    RIGHT_INDEX = max_r;
    MAX_SUM = l_sum + r_sum;
  }

  void FIND_MAXIMUM_SUBARRAY(int A[], int low, int high){
    if(low == high){
      LEFT_INDEX = low;
      RIGHT_INDEX = high;
      MAX_SUM = A[low];
    }
    else{
      int mid = (low+high)/2;

      // left
      FIND_MAXIMUM_SUBARRAY(A, low, mid);
      int left_left_index = LEFT_INDEX;
      int left_right_index = RIGHT_INDEX;
      int left_sum = MAX_SUM;
      // right
      FIND_MAXIMUM_SUBARRAY(A, mid+1, high);
      int right_left_index = LEFT_INDEX;
      int right_right_index = RIGHT_INDEX;
      int right_sum = MAX_SUM;
      // cross
      FIND_MAXIMUM_CROSS_SUBARRAY(A, low, mid, high);
      int cross_left_index = LEFT_INDEX;
      int cross_right_index = RIGHT_INDEX;
      int cross_sum = MAX_SUM;

      if(left_sum > cross_sum && left_sum > right_sum){
        // set all left to global
        LEFT_INDEX = left_left_index;
        RIGHT_INDEX = left_right_index;
        MAX_SUM = left_sum;
      }

      else if(right_sum > left_sum && right_sum > cross_sum){
        // set all right to global
        LEFT_INDEX = right_left_index;
        RIGHT_INDEX = right_right_index;
        MAX_SUM = right_sum;
      }

      else{
        // set all cross to global
        LEFT_INDEX = cross_left_index;
        RIGHT_INDEX = cross_right_index;
        MAX_SUM = cross_sum;
      }
    }
  }


  int main(){
    int A[] = {13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7};
    FIND_MAXIMUM_SUBARRAY(A, 0, 15);
    cout << LEFT_INDEX << " " << RIGHT_INDEX << endl;
    cout << MAX_SUM << endl;
    return 0;
  }

#+END_SRC
*** Strassen's algorithm for matrix multiplication
*** The substituition method for solving recurrences
*** The master method for solving recurrences
*** Proof of the master theorem
** Probabilistic analysis and randomized algorithms
*** The hiring problem
*** Indicator random variables
*** Randomized algorithms
*** Probablistic analysis and further uses of indicator random variables.
